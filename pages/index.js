import Head from "next/head";
import { useEffect, useState, useCallback } from "react";
import { FaStop } from "@react-icons/all-files/fa/FaStop";
import { FaPlay } from "@react-icons/all-files/fa/FaPlay";
import { FaPause } from "@react-icons/all-files/fa/FaPause";
import { FaFlag } from "@react-icons/all-files/fa/FaFlag";

const formatTime = (time) => {
  const milliseconds = time % 1000;
  const seconds = Math.floor(time / 1000) % 60;
  const minutes = Math.floor(time / 60000);
  const millisecondsString = milliseconds.toString().slice(-2);
  return `${minutes.toString().padStart(2, "0")}:${seconds
    .toString()
    .padStart(2, "0")}.${millisecondsString.padStart(2, "0")}`;
};

export default function Home() {
  const [time, setTime] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [laps, setLaps] = useState([]);

  useEffect(() => {
    let intervalId;
    if (isRunning) {
      intervalId = setInterval(() => {
        setTime((prevTime) => prevTime + 10);
      }, 10);
    }
    return () => clearInterval(intervalId);
  }, [isRunning]);

  const handleStart = useCallback(() => setIsRunning(true), []);

  const handleStop = useCallback(() => setIsRunning(false), []);

  const handleReset = useCallback(() => {
    setTime(0);
    setIsRunning(false);
    setLaps([]);
  }, []);

  const handleLap = useCallback(() => {
    setLaps((prevLaps) => [...prevLaps, time]);
  }, [time]);

  return (
    <>
      <Head>
        <title>Stop Watch</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container mx-auto max-w-screen-sm space-y-8 text-center">
        <div className="mx-auto my-8">
          <h1 className="text-5xl text-black">{formatTime(time)}</h1>
        </div>
        <ul className="max-h-80 space-y-4 overflow-x-scroll">
          {laps.map((item, index) => (
            <li key={index} className="flex">
              <div className="flex-auto">
                {laps.length - index < 10
                  ? `0${laps.length - index}`
                  : laps.length - index}
              </div>
              <div aria-label="lap_duration" className="flex-auto">
                + {formatTime(item)}
              </div>
              <div aria-label="lap_time" className="flex-auto">
                {formatTime(item)}
              </div>
            </li>
          ))}
        </ul>

        <div className="space-x-8">
          {time !== 0 && (
            <button
              aria-label={isRunning ? "lap" : "reset"}
              onClick={isRunning ? handleLap : handleReset}
              className="relative mx-auto inline-flex items-center rounded-full bg-white p-4 text-lg text-blue-500 shadow-lg"
            >
              {isRunning ? <FaFlag /> : <FaStop />}
            </button>
          )}

          <button
            aria-label={isRunning ? "stop" : "start"}
            onClick={isRunning ? handleStop : handleStart}
            className="relative mx-auto inline-flex items-center rounded-full bg-white p-4 text-lg text-blue-500 shadow-lg"
          >
            {isRunning ? <FaPause /> : <FaPlay />}
          </button>
        </div>
      </div>
    </>
  );
}
