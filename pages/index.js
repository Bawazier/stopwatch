import Head from "next/head";
import { useEffect, useState, useCallback } from "react";
import { FaStop } from "@react-icons/all-files/fa/FaStop";
import { FaPlay } from "@react-icons/all-files/fa/FaPlay";
import { FaPause } from "@react-icons/all-files/fa/FaPause";
import { FaFlag } from "@react-icons/all-files/fa/FaFlag";

function formatTime(milliSeconds) {
  let second = Math.floor(milliSeconds / 100);
  let minute = Math.floor(second / 60);
  milliSeconds = milliSeconds % 100;
  second = second % 60;
  minute = minute % 60;

  return (
    (minute + "").padStart(2, "0") +
    ":" +
    (second + "").padStart(2, "0") +
    "." +
    (milliSeconds + "").padStart(2, "0")
  );
}

export default function Home() {
  const [milliSeconds, setMilliSeconds] = useState(0);
  const [timeLap, setTimeLap] = useState(0);
  const [play, setPlay] = useState(false);
  const [lap, setLap] = useState([]);

  useEffect(() => {
    if (!play) return;
    const interval = setInterval(() => {
      setMilliSeconds((prevMiliSecond) => prevMiliSecond + 1);
      setTimeLap((prevTimeLap) => prevTimeLap + 1);
    }, 10);

    return () => {
      clearInterval(interval);
    };
  }, [play]);

  const handleToggle = useCallback(() => {
    setPlay((prevPlay) => !prevPlay);
  }, []);

  const handleReset = useCallback(() => {
    setMilliSeconds(0);
    setTimeLap(0);
    setPlay(false);
    setLap([]);
  }, []);

  const handleLap = useCallback(() => {
    setLap((prevLap) => [{ total: milliSeconds, lap: timeLap }, ...prevLap]);
    setTimeLap(0);
  }, [milliSeconds, timeLap]);

  return (
    <>
      <Head>
        <title>Stop Watch</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container mx-auto max-w-screen-sm space-y-8 text-center">
        <div className="mx-auto my-8">
          <h1 className="text-5xl text-black">{formatTime(milliSeconds)}</h1>
        </div>
        <ul className="max-h-80 space-y-4 overflow-x-scroll">
          {lap.map((item, index) => (
            <li key={index} className="flex">
              <div className="flex-auto">
                {lap.length - index < 10
                  ? `0${lap.length - index}`
                  : lap.length - index}
              </div>
              <div className="flex-auto">+ {formatTime(item.total)}</div>
              <div className="flex-auto">{formatTime(item.lap)}</div>
            </li>
          ))}
        </ul>

        <div className="space-x-8">
          {milliSeconds !== 0 && (
            <button
              onClick={play ? handleLap : handleReset}
              className="relative mx-auto inline-flex items-center rounded-full bg-white p-4 text-lg text-blue-500 shadow-lg"
            >
              {play ? <FaFlag /> : <FaStop />}
            </button>
          )}

          <button
            onClick={handleToggle}
            className="relative mx-auto inline-flex items-center rounded-full bg-white p-4 text-lg text-blue-500 shadow-lg"
          >
            {play ? <FaPause /> : <FaPlay />}
          </button>
        </div>
      </div>
    </>
  );
}
